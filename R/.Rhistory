# Function to calculate the proportion of shared phonemes in the correct position
shared_proportion_pos_ok <- function(target_col, response_col) {
if (is.na(target_col) || is.na(response_col) || target_col == "" || response_col == "") {
return(NA)
}
matching_positions <- numeric(nchar(target_col))
for (j in 1:nchar(target_col)) {
if (substr(target_col, j, j) == substr(response_col, j, j)) {
matching_positions[j] <- 1
} else {
matching_positions[j] <- 0
}
}
correct_proportion <- sum(matching_positions) / nchar(target_col)
return(correct_proportion)
}
shared_proportion_pos_ok(raɪnoʊ, hɪpoʊ)
shared_proportion_pos_ok("raɪnoʊ", "hɪpoʊ")
shared_proportion_pos_ok(target_col = "raɪnoʊ", response_col = "hɪpoʊ")
#' @param target_col A string representing the target word to compare.
#' @param response_col A string representing the response word to compare against the target.
#'
#' @returns A numeric value representing the proportion of shared letters between the two input words. This proportion is computed as the ratio of the number of shared letters to the total number of letters in both words combined.
#'
#' @examples
#' shared_proportion("article", "artim")
#'
#' @export
#'
shared_proportion <- function(target_col, response_col) {
# Convert words to lowercase
target_col <- tolower(target_col)
response_col <- tolower(response_col)
# Convert words into character vectors
target_col_chars <- unlist(strsplit(target_col, ""))
response_col_chars <- unlist(strsplit(response_col, ""))
# Count shared letters
shared_letters <- 0
# Count each shared letter only once per occurrence in response_col
for (letter in target_col_chars) {
if (letter %in% response_col_chars) {
shared_letters <- shared_letters + 1
# Remove the first occurrence of the letter in response_col
response_col_chars <- response_col_chars[-which(response_col_chars == letter)[1]]
}
}
# Calculate the total number of letters in both words
total_letters <- nchar(target_col) + nchar(response_col)
# Calculate the percentage of shared letters
shared_percentage <- (shared_letters * 2) / total_letters
return(shared_percentage)
}
#' @param target_col A string representing the target word to compare.
#' @param response_col A string representing the response word to compare against the target.
#'
#' @returns A numeric value representing the proportion of shared letters between the two input words. This proportion is computed as the ratio of the number of shared letters to the total number of letters in both words combined.
#'
#' @examples
#' shared_proportion("article", "artim")
#'
#' @export
#'
shared_proportion <- function(target_col, response_col) {
# Convert words to lowercase
target_col <- tolower(target_col)
response_col <- tolower(response_col)
# Convert words into character vectors
target_col_chars <- unlist(strsplit(target_col, ""))
response_col_chars <- unlist(strsplit(response_col, ""))
# Count shared letters
shared_letters <- 0
# Count each shared letter only once per occurrence in response_col
for (letter in target_col_chars) {
if (letter %in% response_col_chars) {
shared_letters <- shared_letters + 1
# Remove the first occurrence of the letter in response_col
response_col_chars <- response_col_chars[-which(response_col_chars == letter)[1]]
}
}
# Calculate the total number of letters in both words
total_letters <- nchar(target_col) + nchar(response_col)
# Calculate the percentage of shared letters
shared_percentage <- (shared_letters * 2) / total_letters
return(shared_percentage)
}
shared_proportion_pos_ok(target_col = "raɪnoʊ", response_col = "hɪpoʊ")
shared_proportion_pos_ok("raɪnoʊ", "hɪpoʊ")
