"0",""
"0","# remove some values leaving NAs to check that the functions work correctly"
"0",""
"0","IGC_step2_cleanNA = IGC_step2_clean %>%"
"0","  mutate("
"0","    Response = if_else(row_number() == 2, NA_character_, Response),"
"0","    item = if_else(row_number() == 3, NA_character_, item)"
"0","  )"
"0",""
"0","IGC_step3 <- IGC_step2_cleanNA %>%"
"0","  check_lexicality(item_col = ""item"", response_col = ""Response"", criterion = ""database"") %>%"
"0","  get_formal_similarity(item_col = ""item"", response_col = ""Response"","
"0","                          attempt_col = ""Attempt"","
"0","                          group_cols = c(""ID"", ""task_item_ID"")) %>%"
"0","  get_semantic_similarity(item_col = ""item"", response_col = ""Response"", model = m_w2v)"
"2","The function check_lexicality() took 3.77 seconds to be executed
"
"2","The function get_formal_similarity() took 5.00 seconds to be executed
"
"2","The function get_semantic_similarity() took 5.75 seconds to be executed
"
"0","# Compute accessed col"
"0",""
"0","IGC_step3 = IGC_step3 %>% "
"0","    mutate(accessed = if_else(Response == item, 1, 0))"
"0",""
"0","IGC_step3_skinnydf = IGC_step3 %>% dplyr::select(-c(task_ID, task_type))"
"0",""
"0","paged_table(IGC_step3_skinnydf, options = list(rows.print = 25, align = ""c""))"
