plot3.1 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3.1)
# Mostrar el gráfico
plot3.1
ggsave("artwork/figure3.1.png", plot3.1, width = 14.15, height = 4.75, dpi = 600)
ggsave("artwork/figure3.1.svg", plot3.1, width = 14.15, height = 4.75, dpi = 600)
colnames(IGC_step2)
IGC_step2.1 = IGC_step2 %>% positional_accuracy(item_col = "item_phon",
response_col = "response_phon",
match_col = "adj_strict_match_pos")
IGC_step2.1_skinnydf = IGC_step2.1 %>% dplyr::select(c(task_ID, ID, item_ID, item_phon, response_phon, RA, attempt, position, element_in_item, element_in_response, correct_pos)) %>% dplyr::filter(ID %in% c("9008", "9009"))
rmarkdown::paged_table(IGC_step2.1_skinnydf, options = list(rows.print = 25, align = "c"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot4 <- gridExtra::tableGrob(
IGC_step2.1_skinnydf %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 15 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot4 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot4)
# Mostrar el gráfico
plot4
ggsave("artwork/figure4.png", plot4, width = 12, height = 4.75, dpi = 600)
ggsave("artwork/figure4.svg", plot4, width = 12, height = 4.75, dpi = 600)
# Convertir targetL a character para evitar problemas al combinar dataframes
positions_accuracy <- IGC_step2.1 %>%
dplyr::mutate(targetL = as.character(targetL))
# Duplicar y modificar el dataframe para crear 'positions_general'
positions_general <- positions_accuracy %>%
dplyr::mutate(targetL = "General")
# Combinar ambos dataframes
positions <- dplyr::bind_rows(positions_accuracy, positions_general)
# Especificar manualmente los niveles en el orden deseado
desired_levels <- c("3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
"13", "14", "15", "17", "21", "22", "24", "48", "General")
# Convertir correct_pos a numérico y ordenar targetL como factor según desired_levels
positions <- positions %>%
dplyr::mutate(correct_pos = as.numeric(correct_pos),
targetL = factor(targetL, levels = desired_levels)) %>%
dplyr::arrange(correct_pos, targetL)
# Definir un conjunto de linetypes que se pueda repetir
custom_linetypes <- rep(c("solid", "dashed", "dotted", "longdash", "dotdash"),
length.out = nlevels(positions$targetL))
# Necesitamos la librería scales para usar hue_pal
library(scales)
# Obtener los colores predeterminados para el resto de los grupos
default_colors <- hue_pal()(length(unique(positions$targetL)))
# Asignar el color gris oscuro para "General"
colors <- setNames(default_colors, unique(positions$targetL))
colors["General"] <- "#515151"
# Definir los tipos de línea personalizados y asignar a General la línea continua
custom_linetypes <- setNames(rep("solid", length(unique(positions$targetL))), unique(positions$targetL))
custom_linetypes["General"] <- "solid"  # Línea continua para General
# Definir niveles de alpha: General tiene 0.9, el resto 0.5
custom_alpha <- setNames(rep(0.55, length(unique(positions$targetL))), unique(positions$targetL))
custom_alpha["General"] <- 0.9  # Alpha más alto para General
plot_positions <- positions %>%
dplyr::group_by(position, targetL) %>%  # Agrupamos por 'Position' y 'targetL'
dplyr::summarize(
acc = mean(correct_pos, na.rm = TRUE) * 100,
n = dplyr::n(),
.groups = 'drop'  # Omitimos advertencias sobre el agrupamiento
) %>%
ggplot(aes(x = as.numeric(position), y = acc, group = targetL,
fill = targetL, color = targetL, lty = targetL)) +
# Aplicamos alpha personalizado usando aes y valores predefinidos para cada grupo
geom_line(aes(alpha = targetL), linewidth = 0.9) +
geom_point(aes(size = n, alpha = targetL), shape = 21, color = "black") +
# Asignar colores y tipos de línea personalizados
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
scale_linetype_manual(values = custom_linetypes) +
# Asignar los valores de alpha para cada grupo
scale_alpha_manual(values = custom_alpha) +
theme(panel.border = element_rect(colour = "black", fill = NA),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
ylab("Positional accuracy (%)") +
xlab("Position") +
ylim(20, 100) +  # Aseguramos que el eje y muestre de 0 a 100
guides(fill = guide_legend(title = "Word Length"),
lty = guide_legend(title = "Word Length"),
color = guide_legend(title = "Word Length"),
alpha = "none",  # Ocultamos la leyenda de alpha
size = guide_legend(title = "Datapoints")) +
theme_grey(base_size = 12) +
theme(panel.grid = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "right",
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)))
plot_positions
ggsave("artwork/figure5.png", plot = plot_positions, width = 6, height = 4.75)
ggsave("artwork/figure5.svg", plot = plot_positions, width = 6, height = 4.75)
m_w2v = word2vec::read.word2vec(file = file.choose(), normalize = F)
IGC_step2_clean = IGC %>%
separate_responses(
col_name = "clean_response",
separate_with = ", ") %>%
get_attempts(
first_production = attempt_1, drop_blank_spaces = T)  %>%
dplyr::select(task_ID, ID, item_ID, task_type, item, response, RA, attempt) %>%
get_formal_similarity(item_col = "item", response_col = "response",
attempt_col = "attempt",
group_cols = c("ID", "item_ID"))
IGC_step2_clean = IGC %>%
separate_responses(
col_name = "clean_response",
separate_with = ", ") %>%
get_attempts(
first_production = attempt_1, drop_blank_spaces = T)  %>%
dplyr::select(task_ID, ID, item_ID, task_type, item, response, RA, attempt) %>%
get_formal_similarity(item_col = "item", response_col = "response",
attempt_col = "attempt",
group_cols = c("ID", "item_ID"))
IGC_step2clean_skinnydf = IGC_step2_clean %>% dplyr::select(-c(task_ID, task_type))
rmarkdown::paged_table(IGC_step2clean_skinnydf, options = list(rows.print = 25, align = "c"))
IGC_step2_cleanNA = IGC_step2_clean %>%
dplyr::mutate(
Response = dplyr::if_else(dplyr::row_number() == 2, NA_character_, response),
item = dplyr::if_else(dplyr::row_number() == 3, NA_character_, item)
)
IGC_step3 <- IGC_step2_cleanNA %>%
get_formal_similarity(item_col = "item", response_col = "Response",
attempt_col = "Attempt",
group_cols = c("ID", "item_ID")) %>%
check_lexicality(item_col = "item", response_col = "Response", criterion = "database") %>%
get_semantic_similarity(item_col = "item", response_col = "Response", model = m_w2v)
IGC_step3 <- IGC_step2_cleanNA %>%
get_formal_similarity(item_col = "item", response_col = "Response",
attempt_col = "Attempt",
group_cols = c("ID", "item_ID")) %>%
check_lexicality(item_col = "item", response_col = "Response", criterion = "database") %>%
get_semantic_similarity(item_col = "item", response_col = "Response", model = m_w2v)
IGC_step3 <- IGC_step2_cleanNA %>%
get_formal_similarity(item_col = "item", response_col = "Response",
attempt_col = "Attempt",
group_cols = c("ID", "item_ID")) %>%
check_lexicality(item_col = "item", response_col = "Response", criterion = "database") %>%
get_semantic_similarity(item_col = "item", response_col = "Response", model = m_w2v)
IGC_step3
IGC_step3 <- IGC_step2_cleanNA %>%
get_formal_similarity(item_col = "item", response_col = "response",
attempt_col = "attempt",
group_cols = c("ID", "item_ID")) %>%
check_lexicality(item_col = "item", response_col = "response", criterion = "database") %>%
get_semantic_similarity(item_col = "item", response_col = "response", model = m_w2v)
# Convertir targetL a character para evitar problemas al combinar dataframes
positions_accuracy <- IGC_step2.1 %>%
dplyr::mutate(targetL = as.character(targetL))
# Duplicar y modificar el dataframe para crear 'positions_general'
positions_general <- positions_accuracy %>%
dplyr::mutate(targetL = "General")
# Combinar ambos dataframes
positions <- dplyr::bind_rows(positions_accuracy, positions_general)
# Especificar manualmente los niveles en el orden deseado
desired_levels <- c("3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
"13", "14", "15", "17", "21", "22", "24", "48", "General")
# Convertir correct_pos a numérico y ordenar targetL como factor según desired_levels
positions <- positions %>%
dplyr::mutate(correct_pos = as.numeric(correct_pos),
targetL = factor(targetL, levels = desired_levels)) %>%
dplyr::arrange(correct_pos, targetL)
# Definir un conjunto de linetypes que se pueda repetir
custom_linetypes <- rep(c("solid", "dashed", "dotted", "longdash", "dotdash"),
length.out = nlevels(positions$targetL))
# Necesitamos la librería scales para usar hue_pal
library(scales)
# Obtener los colores predeterminados para el resto de los grupos
default_colors <- hue_pal()(length(unique(positions$targetL)))
# Asignar el color gris oscuro para "General"
colors <- setNames(default_colors, unique(positions$targetL))
colors["General"] <- "#515151"
# Definir los tipos de línea personalizados y asignar a General la línea continua
custom_linetypes <- setNames(rep("solid", length(unique(positions$targetL))), unique(positions$targetL))
custom_linetypes["General"] <- "solid"  # Línea continua para General
# Definir niveles de alpha: General tiene 0.9, el resto 0.5
custom_alpha <- setNames(rep(0.55, length(unique(positions$targetL))), unique(positions$targetL))
custom_alpha["General"] <- 0.9  # Alpha más alto para General
plot_positions <- positions %>%
dplyr::group_by(position, targetL) %>%  # Agrupamos por 'Position' y 'targetL'
dplyr::summarize(
acc = mean(correct_pos, na.rm = TRUE) * 100,
n = dplyr::n(),
.groups = 'drop'  # Omitimos advertencias sobre el agrupamiento
) %>%
ggplot(aes(x = as.numeric(position), y = acc, group = targetL,
fill = targetL, color = targetL, lty = targetL)) +
# Aplicamos alpha personalizado usando aes y valores predefinidos para cada grupo
geom_line(aes(alpha = targetL), linewidth = 0.9) +
geom_point(aes(size = n, alpha = targetL), shape = 21, color = "black") +
# Asignar colores y tipos de línea personalizados
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
scale_linetype_manual(values = custom_linetypes) +
# Asignar los valores de alpha para cada grupo
scale_alpha_manual(values = custom_alpha) +
theme(panel.border = element_rect(colour = "black", fill = NA),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
ylab("Positional accuracy (%)") +
xlab("Position") +
ylim(20, 100) +  # Aseguramos que el eje y muestre de 0 a 100
guides(fill = guide_legend(title = "Word Length"),
lty = guide_legend(title = "Word Length"),
color = guide_legend(title = "Word Length"),
alpha = "none",  # Ocultamos la leyenda de alpha
size = guide_legend(title = "Datapoints")) +
theme_grey(base_size = 12) +
theme(panel.grid = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "right",
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)))
plot_positions
ggsave("artwork/figure5.png", plot = plot_positions, width = 6, height = 5)
ggsave("artwork/figure5.svg", plot = plot_positions, width = 6, height = 5)
ggsave("artwork/figure5.png", plot = plot_positions, width = 6, height = 5.15)
ggsave("artwork/figure5.svg", plot = plot_positions, width = 6, height = 5.15)
IGC_step4_regular <- IGC_step3_regular %>% classify_errors(access_col = "accessed",
response_col = "response",
item_col = "item",
also_classify_RAs = F) %>%
dplyr::mutate(general_ID = dplyr::row_number())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(sunflower) # to work
require(tidyverse) # to work along sunflower
require(knitr) # to work in Rmarkdown
require(kableExtra) # to work in Rmarkdown
require(rmarkdown) # to work in Rmarkdown
require(ggplot2) #to plot
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(clean_response = final_response) %>%
dplyr::mutate(ID = ID+9000)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, clean_response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item_ID, item, clean_response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 7.25, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 7.25, height = 3.75, dpi = 600)
IGC_step1 = IGC %>% separate_responses(col_name = "clean_response",
separate_with = ", ") %>%
get_attempts(drop_blank_spaces = T)
IGC_step1_skinnydf = IGC_step1 %>% dplyr::select(-c(task_type))
rmarkdown::paged_table(IGC_step1_skinnydf, options = list(rows.print = 25, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot2 <- gridExtra::tableGrob(IGC_step1_skinnydf %>% dplyr::select(c(task_ID, ID, item_ID, item, attempt, response)) %>%
dplyr::slice_head(n = 15))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot2 <- ggplot2::ggplot() +
ggplot2::theme_void() +  # Eliminar todos los elementos gráficos
ggplot2::annotation_custom(table_plot2)
# Mostrar el gráfico
plot2
ggsave("artwork/figure2.png", plot2, width = 7.25, height = 4.75, dpi = 600)
ggsave("artwork/figure2.svg", plot2, width = 7.25, height = 4.75, dpi = 600)
IGC_step1 <- readxl::read_xlsx("data/long_with_phon.xlsx") %>%
dplyr::select(modality, test, task_name, task_ID, task_type, ID, item_ID = task_item_ID,
item, item_phon = target_word_transcrito_clean,
response, response_phon = response_word_transcrito_clean,
RA = cda_behavior, attempt = Attempt) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(modality == "spoken") %>%
dplyr::filter(!str_detect(task_name, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::mutate(ID = ID+9000)
IGC_step2 = IGC_step1 %>% get_formal_similarity(item_col = "item_phon",
response_col = "response_phon",
attempt_col = "attempt",
group_cols = c("ID", "task_ID"))
# Define terms to remove
terms_to_remove <- c("el", "la", "un", "una", "vaya",
"los", "las", "unos", "unas", "no")
# Create a pattern to match the terms
pattern <- paste0("\\b(", paste(terms_to_remove, collapse = "|"), ")\\b")
# Filter the DataFrame to exclude rows containing the terms in 'Response'
IGC_step2_skinnydf <- IGC_step2 %>%
dplyr::filter(!str_detect(response, pattern))
IGC_step2_skinnydf = IGC_step2 %>% dplyr::select(-c(task_name, test))
colnames(IGC_step2_skinnydf)
rmarkdown::paged_table(IGC_step2_skinnydf, options = list(rows.print = 25, align = "c"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% #dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
dplyr::select(-comment_warning)%>%
dplyr::select(c(task_ID, ID, item_ID, item_phon, response_phon,
RA, attempt, shared1char:DLd, JWd)) %>%
#dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 15 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure3.png", plot3, width = 13.5, height = 4.75, dpi = 600)
ggsave("artwork/figure3.svg", plot3, width = 13.5, height = 4.75, dpi = 600)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3.1 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% #dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
#dplyr::select(-comment_warning)%>%
dplyr::select(c(task_ID, ID, item_ID, item_phon, response_phon, RA, attempt, pcc, lcs,
similarity_str:adj_strict_match_pos, approach_diff)) %>%
#dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 15 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3.1 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3.1)
# Mostrar el gráfico
plot3.1
ggsave("artwork/figure3.1.png", plot3.1, width = 14.15, height = 4.75, dpi = 600)
ggsave("artwork/figure3.1.svg", plot3.1, width = 14.15, height = 4.75, dpi = 600)
colnames(IGC_step2)
IGC_step2.1 = IGC_step2 %>% positional_accuracy(item_col = "item_phon",
response_col = "response_phon",
match_col = "adj_strict_match_pos")
IGC_step2.1_skinnydf = IGC_step2.1 %>% dplyr::select(c(task_ID, ID, item_ID, item_phon, response_phon, RA, attempt, position, element_in_item, element_in_response, correct_pos)) %>% dplyr::filter(ID %in% c("9008", "9009"))
rmarkdown::paged_table(IGC_step2.1_skinnydf, options = list(rows.print = 25, align = "c"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot4 <- gridExtra::tableGrob(
IGC_step2.1_skinnydf %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 15 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot4 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot4)
# Mostrar el gráfico
plot4
ggsave("artwork/figure4.png", plot4, width = 12, height = 4.75, dpi = 600)
ggsave("artwork/figure4.svg", plot4, width = 12, height = 4.75, dpi = 600)
# Convertir targetL a character para evitar problemas al combinar dataframes
positions_accuracy <- IGC_step2.1 %>%
dplyr::mutate(targetL = as.character(targetL))
# Duplicar y modificar el dataframe para crear 'positions_general'
positions_general <- positions_accuracy %>%
dplyr::mutate(targetL = "General")
# Combinar ambos dataframes
positions <- dplyr::bind_rows(positions_accuracy, positions_general)
# Especificar manualmente los niveles en el orden deseado
desired_levels <- c("3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
"13", "14", "15", "17", "21", "22", "24", "48", "General")
# Convertir correct_pos a numérico y ordenar targetL como factor según desired_levels
positions <- positions %>%
dplyr::mutate(correct_pos = as.numeric(correct_pos),
targetL = factor(targetL, levels = desired_levels)) %>%
dplyr::arrange(correct_pos, targetL)
# Definir un conjunto de linetypes que se pueda repetir
custom_linetypes <- rep(c("solid", "dashed", "dotted", "longdash", "dotdash"),
length.out = nlevels(positions$targetL))
# Necesitamos la librería scales para usar hue_pal
library(scales)
# Obtener los colores predeterminados para el resto de los grupos
default_colors <- hue_pal()(length(unique(positions$targetL)))
# Asignar el color gris oscuro para "General"
colors <- setNames(default_colors, unique(positions$targetL))
colors["General"] <- "#515151"
# Definir los tipos de línea personalizados y asignar a General la línea continua
custom_linetypes <- setNames(rep("solid", length(unique(positions$targetL))), unique(positions$targetL))
custom_linetypes["General"] <- "solid"  # Línea continua para General
# Definir niveles de alpha: General tiene 0.9, el resto 0.5
custom_alpha <- setNames(rep(0.55, length(unique(positions$targetL))), unique(positions$targetL))
custom_alpha["General"] <- 0.9  # Alpha más alto para General
plot_positions <- positions %>%
dplyr::group_by(position, targetL) %>%  # Agrupamos por 'Position' y 'targetL'
dplyr::summarize(
acc = mean(correct_pos, na.rm = TRUE) * 100,
n = dplyr::n(),
.groups = 'drop'  # Omitimos advertencias sobre el agrupamiento
) %>%
ggplot(aes(x = as.numeric(position), y = acc, group = targetL,
fill = targetL, color = targetL, lty = targetL)) +
# Aplicamos alpha personalizado usando aes y valores predefinidos para cada grupo
geom_line(aes(alpha = targetL), linewidth = 0.9) +
geom_point(aes(size = n, alpha = targetL), shape = 21, color = "black") +
# Asignar colores y tipos de línea personalizados
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
scale_linetype_manual(values = custom_linetypes) +
# Asignar los valores de alpha para cada grupo
scale_alpha_manual(values = custom_alpha) +
theme(panel.border = element_rect(colour = "black", fill = NA),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
ylab("Positional accuracy (%)") +
xlab("Position") +
ylim(20, 100) +  # Aseguramos que el eje y muestre de 0 a 100
guides(fill = guide_legend(title = "Word Length"),
lty = guide_legend(title = "Word Length"),
color = guide_legend(title = "Word Length"),
alpha = "none",  # Ocultamos la leyenda de alpha
size = guide_legend(title = "Datapoints")) +
theme_grey(base_size = 12) +
theme(panel.grid = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "right",
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)))
plot_positions
ggsave("artwork/figure5.png", plot = plot_positions, width = 6, height = 5.15)
ggsave("artwork/figure5.svg", plot = plot_positions, width = 6, height = 5.15)
m_w2v = word2vec::read.word2vec(file = file.choose(), normalize = F)
IGC_step2_clean = IGC %>%
separate_responses(
col_name = "clean_response",
separate_with = ", ") %>%
get_attempts(
first_production = attempt_1, drop_blank_spaces = T)  %>%
dplyr::select(task_ID, ID, item_ID, task_type, item, response, RA, attempt) %>%
get_formal_similarity(item_col = "item", response_col = "response",
attempt_col = "attempt",
group_cols = c("ID", "item_ID"))
IGC_step2clean_skinnydf = IGC_step2_clean %>% dplyr::select(-c(task_ID, task_type))
rmarkdown::paged_table(IGC_step2clean_skinnydf, options = list(rows.print = 25, align = "c"))
# remove some values leaving NAs to check that the functions work correctly
IGC_step2_cleanNA = IGC_step2_clean %>%
dplyr::mutate(
Response = dplyr::if_else(dplyr::row_number() == 2, NA_character_, response),
item = dplyr::if_else(dplyr::row_number() == 3, NA_character_, item)
)
IGC_step3 <- IGC_step2_cleanNA %>%
get_formal_similarity(item_col = "item", response_col = "response",
attempt_col = "attempt",
group_cols = c("ID", "item_ID")) %>%
check_lexicality(item_col = "item", response_col = "response", criterion = "database") %>%
get_semantic_similarity(item_col = "item", response_col = "response", model = m_w2v)
# Compute accessed col
IGC_step3 = IGC_step3 %>%
dplyr::mutate(accessed = dplyr::if_else(response == item, 1, 0))
IGC_step3_skinnydf = IGC_step3 %>% dplyr::select(-c(item_ID, task_type))
rmarkdown::paged_table(IGC_step3_skinnydf, options = list(rows.print = 25, align = "c"))
# An hypothetical case in which we do not have RAs
IGC_step3_regular = IGC_step3 %>% filter(RA == 0)
IGC_step4_regular <- IGC_step3_regular %>% classify_errors(access_col = "accessed",
response_col = "response",
item_col = "item") %>%
dplyr::mutate(general_ID = dplyr::row_number())
IGC_step4_regular_skinny = IGC_step4_regular %>%
dplyr::select(general_ID, ID, item_ID, item, Response, lexicality,
cosine_similarity, nonword:no_response, comment)
rmarkdown::paged_table(IGC_step4_regular_skinny, options = list(rows.print = 15, align = "c"))
IGC_step4 <- IGC_step3 %>% classify_errors(access_col = "accessed",
RA_col = "RA",
response_col = "response",
item_col = "item",
also_classify_RAs = T) %>%
dplyr::mutate(general_ID = dplyr::row_number())
IGC_step4
View(IGC_step4)
IGC_step4 <- IGC_step3 %>% classify_errors(access_col = "accessed",
RA_col = "RA",
response_col = "response",
item_col = "item",
also_classify_RAs = F) %>%
dplyr::mutate(general_ID = dplyr::row_number())
dplyr::mutate(general_ID = dplyr::row_number())
View(IGC_step4)
# Clear the workspace and unload all loaded packages
rm(list = ls())
invisible(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE))
# 1. Install the devtools package (if not already installed)
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# 4. Load all required packages
library(sunflower)
# Load dataset
dataframe0 = sunflower::simulated_sample
# Data wrangling: Separate responses
dataframe1 = sunflower::separate_responses(dataframe0,
col_name = "response",
separate_with = ", ")
dataframe1 = separate_responses(dataframe0,
col_name = "response",
separate_with = ", ")
# Extract attempts and clean blank spaces
dataframe2 = sunflower::get_attempts(dataframe1,
first_production = attempt_1,
drop_blank_spaces = T)
dataframe2 = get_attempts(dataframe1,
first_production = attempt_1,
drop_blank_spaces = T)
