errors_classified %>%
select(ID, item_ID, item, Response, RA, Attempt, nonword:comment) %>%
head(8) %>% knitr::kable()
errors_classified
errors_classified = df_to_classify %>%
check_lexicality(item_col = "item", response_col = "Response", criterion = "database") %>%
get_formal_similarity(item_col = "item", response_col = "Response",
attempt_col = "Attempt", group_cols = c("ID", "item_ID")) %>%
get_semantic_similarity(item_col = "item", response_col = "Response", model = m_w2v) %>%
classify_errors(response_col = "Response", item_col = "item",
access_col = "accessed", RA_col = "RA", also_classify_RAs = T)
errors_classified = errors_classified %>%
dplyr::select(ID, item_ID, item, Response, RA,
Attempt, lexicality, cosine_similarity, nonword:no_response, comment)
errors_classified
errors_classified = errors_classified %>%
dplyr::select(ID, item_ID, item, Response, RA,
Attempt, lexicality, cosine_similarity, nonword:no_response, comment) %>%
dplyr::filter(ID %in% c(8, 156, 13, 3284, 222, 3448, 5658))
errors_classified = df_to_classify %>%
check_lexicality(item_col = "item", response_col = "Response", criterion = "database") %>%
get_formal_similarity(item_col = "item", response_col = "Response",
attempt_col = "Attempt", group_cols = c("ID", "item_ID")) %>%
get_semantic_similarity(item_col = "item", response_col = "Response", model = m_w2v) %>%
classify_errors(response_col = "Response", item_col = "item",
access_col = "accessed", RA_col = "RA", also_classify_RAs = T)
errors_classified = errors_classified %>%
dplyr::select(ID, item_ID, item, Response, RA,
Attempt, lexicality, cosine_similarity, nonword:no_response, comment)
errors_classified %>% dplyr::filter(ID %in% c(8, 156, 13, 3284, 222, 3448, 5658))
View(errors_classified)
errors_classified = errors_classified %>%
dplyr::select(ID, item_ID, item, Response, RA,
Attempt, lexicality, cosine_similarity, nonword:no_response, comment)%>%
dplyr::mutate(general_ID = dplyr::row_number())
errors_classified = errors_classified %>%
dplyr::select(ID, item_ID, item, Response, RA,
Attempt, lexicality, cosine_similarity, nonword:no_response, comment)%>%
dplyr::mutate(general_ID = dplyr::row_number())
errors_classified %>% dplyr::filter(general_ID %in% c(8, 156, 13, 3284, 222, 3448, 5658))
errors_classified %>% dplyr::filter(general_ID %in% c(8, 156, 13, 3284, 222, 3448, 5658)) %>% View()
View(errors_classified)
# Crear o editar el archivo .gitignore
gitignore_path <- ".gitignore"
ignore_content <- c(
"dependency-bundle/",
"R/old_functions/",
"data/mine/",
"raw-data/",
"manuscript/"
)
writeLines(ignore_content, gitignore_path)
# Eliminar directorios del índice de Git
dirs_to_remove <- c("dependency-bundle", "R/old_functions", "data/mine", "raw-data", "manuscript")
# Bucle para eliminar los directorios del índice de Git
for (dir in dirs_to_remove) {
system(paste("git rm -r --cached", dir))
}
# Agregar los cambios al índice
system("git add .")
# Hacer commit
system("git commit -m 'Aplicar .gitignore y eliminar directorios rastreados'")
# Verificar que los directorios están siendo ignorados
for (dir in dirs_to_remove) {
check_ignore_command <- paste("git check-ignore -v", dir)
system(check_ignore_command)
}
git rm -r --cached dependency-bundle/
git commit --amend
document()
install()
# Cargar las librerías necesarias
library(data.table)
library(stringdist)
# Generar datos simulados
set.seed(123)  # Fijar semilla para reproducibilidad
# Datos de ejemplo
items <- c("peine", "pente", "peinta", "perro", "gato", "camino", "coche", "pelota", "sol", "luna")
# Función para simular parrafias fonológicas no formales
generate_paraphasia <- function(item) {
# Crear algunos errores fonológicos posibles
errors <- list(
"substitution" = c("pente" = "pen", "peinta" = "pente", "gato" = "gatu", "perro" = "pero", "camino" = "camina"),
"omission" = c("peine" = "pein", "pelota" = "pelot", "sol" = "so"),
"addition" = c("peine" = "peines", "perro" = "perrillo"),
"distortion" = c("luna" = "luña", "peine" = "peni")
)
# Escoger un tipo de error aleatorio
error_type <- sample(names(errors), 1)
# Aplicar el error fonológico correspondiente
error <- errors[[error_type]]
# Si el item tiene un error, lo reemplazamos
if (item %in% names(error)) {
item <- sample(error[item], 1)
}
return(item)
}
# Lista de respuestas con parrafias fonológicas
responses_list <- lapply(items, function(item) {
n_responses <- sample(1:3, 1)  # Número de respuestas por ítem, de 1 a 3
responses <- replicate(n_responses, generate_paraphasia(item))
paste(responses, collapse = ", ")  # Unir las respuestas con coma
})
# Crear el data.table
data <- data.table(
item = sample(items, 60, replace = TRUE),  # 60 items aleatorios
response = sapply(1:60, function(i) responses_list[[sample(1:length(responses_list), 1)]]),
item_ID = 1:60,
task_name = sample(c("EPLA", "TASK_A", "TASK_B"), 60, replace = TRUE),
assessment_date = sample(c("03-11", "04-11", "05-11"), 60, replace = TRUE)
)
# Función para comprobar si alguna respuesta coincide con el item usando fuzzy matching
data[, access_to_target_word := sapply(strsplit(response, ", "), function(responses) {
any(sapply(responses, function(r) stringdist::stringdist(trimws(r), item, method = "jw") < 0.2))
})]
# Verificar las primeras filas de la tabla simulada
head(data, 10)  # Mostrar solo las primeras 10 filas
# Cargar las librerías necesarias
library(data.table)
library(stringdist)
# Generar datos simulados
set.seed(123)  # Fijar semilla para reproducibilidad
# Datos de ejemplo para items
items <- c("peine", "pente", "peinta", "perro", "gato", "camino", "coche", "pelota", "sol", "luna")
# Función para simular parrafias fonológicas no formales
generate_paraphasia <- function(item) {
# Crear algunos errores fonológicos posibles
errors <- list(
"substitution" = c("pente" = "pen", "peinta" = "pente", "gato" = "gatu", "perro" = "pero", "camino" = "camina"),
"omission" = c("peine" = "pein", "pelota" = "pelot", "sol" = "so"),
"addition" = c("peine" = "peines", "perro" = "perrillo"),
"distortion" = c("luna" = "luña", "peine" = "peni")
)
# Escoger un tipo de error aleatorio
error_type <- sample(names(errors), 1)
# Aplicar el error fonológico correspondiente
error <- errors[[error_type]]
# Si el item tiene un error, lo reemplazamos
if (item %in% names(error)) {
item <- sample(error[item], 1)
}
return(item)
}
# Lista de respuestas con parrafias fonológicas
responses_list <- lapply(items, function(item) {
n_responses <- sample(1:3, 1)  # Número de respuestas por ítem, de 1 a 3
responses <- replicate(n_responses, generate_paraphasia(item))
paste(responses, collapse = ", ")  # Unir las respuestas con coma
})
# Generar las tareas con nombres más específicos
task_names <- c("EPLA_Conceptos", "Evaluación_Vocalización", "Tarea_Sílabas", "Identificación_Palabras", "Prueba_Fonológica", "Evaluación_Pronunciación", "Test_Asociación_Fonológica", "Desafío_Sonidos", "Prueba_Lexical", "Tarea_Fonética")
# Crear el data.table con tareas más apropiadas y respuestas coherentes
data <- data.table(
item = sample(items, 60, replace = TRUE),  # 60 items aleatorios
response = sapply(1:60, function(i) responses_list[[sample(1:length(responses_list), 1)]]),
item_ID = 1:60,
task_name = sample(task_names, 60, replace = TRUE),  # Asignar tareas aleatorias
assessment_date = sample(c("03-11", "04-11", "05-11"), 60, replace = TRUE)
)
# Función para comprobar si alguna respuesta coincide con el item usando fuzzy matching
data[, access_to_target_word := sapply(strsplit(response, ", "), function(responses) {
any(sapply(responses, function(r) stringdist::stringdist(trimws(r), item, method = "jw") < 0.2))
})]
# Verificar las primeras filas de la tabla simulada
head(data, 10)  # Mostrar solo las primeras 10 filas
# Crear un data frame con los datos
data <- data.frame(
item_id = 1:13,  # IDs del 1 al 13
item = c(
'peine', 'mesa', 'casa', 'perro', 'gato',
'silla', 'ventana', 'puerta', 'luz', 'luna',
'sol', 'estrella', 'cielo'
),
response = c(
'pente, peina',
'misa, miso',
'casa',
'pelo, gato',
'gatoz',
'sile, silla',
'ventanita, ventana',
'puertita, puerta',
'luces, luz',
'lunita, luna',
'solito, sol',
'estrellita, estrella',
'cielito, cielo'
),
access_to_target = c(
1, 0, 1, 0, 0,
1, 1, 1, 1, 1,
1, 1, 1
),
task_name = rep('EPLA', 13),  # Repetir "EPLA" para todos los ítems
assessment_date = rep('03-11-2024', 13) # Repetir la fecha
)
# Mostrar el DataFrame
print(data)
# Crear un data frame con los datos de la primera tarea
data1 <- data.frame(
item_id = 1:13,  # IDs del 1 al 13
item = c(
'peine', 'mesa', 'casa', 'perro', 'gato',
'silla', 'ventana', 'puerta', 'luz', 'luna',
'sol', 'estrella', 'cielo'
),
response = c(
'pente, peina',
'misa, miso',
'casa',
'pelo, gato',
'gatoz',
'sile, silla',
'ventanita, ventana',
'puertita, puerta',
'luces, luz',
'lunita, luna',
'solito, sol',
'estrellita, estrella',
'cielito, cielo'
),
access_to_target = c(
1, 0, 1, 0, 0,
1, 1, 1, 1, 1,
1, 1, 1
),
task_name = rep('EPLA', 13),  # Repetir "EPLA" para todos los ítems
assessment_date = rep('03-11-2024', 13) # Repetir la fecha
)
# Crear un data frame con los datos de la primera tarea
data1 <- data.frame(
item_id = 1:13,  # IDs del 1 al 13
item = c(
'peine', 'mesa', 'casa', 'perro', 'gato',
'silla', 'ventana', 'puerta', 'luz', 'luna',
'sol', 'estrella', 'cielo'
),
response = c(
'pente, peina',
'misa, miso',
'casa',
'pelo, gato',
'gatoz',
'sile, silla',
'ventanita, ventana',
'puertita, puerta',
'luces, luz',
'lunita, luna',
'solito, sol',
'estrellita, estrella',
'cielito, cielo'
),
access_to_target = c(
1, 0, 1, 0, 0,
1, 1, 1, 1, 1,
1, 1, 1
),
task_name = rep('example1', 13),  # Repetir "EPLA" para todos los ítems
assessment_date = rep('03-11-2024', 13) # Repetir la fecha
)
# Crear un data frame con los datos de la segunda tarea
data2 <- data.frame(
item_id = 14:26, # IDs del 14 al 26
item = c(
'flor', 'árbol', 'ratón', 'elefante',
'jirafa', 'león', 'tigre', 'pez',
'pájaro', 'mariposa', 'araña',
'abeja', 'libro'
),
response = c(
'florecita, flor',
'arbolito, árbol',
'ratoncito, ratón',
'elefantito, elefante',
'jirafita, jirafa',
'leoncito, león',
'tigrecito, tigre',
'pezito, pez',
'pajarito, pájaro',
'mariposita, mariposa',
'arañita, araña',
'abejita, abeja',
'librito, libro'
),
access_to_target = c(
1, 1, 1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1
),
task_name = rep('example2', 13), # Nueva tarea
assessment_date = rep('04-11-2024', 13) # Nueva fecha
)
# Combinar ambos data frames
combined_data <- rbind(data1, data2)
# Mostrar el DataFrame combinado
print(combined_data)
# Crear un data frame con los datos de la primera tarea
data1 <- data.frame(
item_id = 1:13,  # IDs del 1 al 13
item = c(
'peine', 'mesa', 'casa', 'perro', 'gato',
'silla', 'ventana', 'puerta', 'luz', 'luna',
'sol', 'estrella', 'cielo'
),
response = c(
'pente, peina',
'misa, miso',
'casa',
'pelo, gato',
'gatoz',
'sile, silla',
'venta, ventana',
'puerpo, puerta',
'luces, luz',
'lunita, luna',
'solito, sol',
'esc, esme, este, estrella',
'cielito, cielo'
),
access_to_target = c(
1, 0, 1, 0, 0,
1, 1, 1, 1, 1,
1, 1, 1
),
task_name = rep('example1', 13),  # Repetir "EPLA" para todos los ítems
assessment_date = rep('03-11-2024', 13) # Repetir la fecha
)
# Crear un data frame con los datos de la segunda tarea
data2 <- data.frame(
item_id = 14:26, # IDs del 14 al 26
item = c(
'flor', 'árbol', 'ratón', 'elefante',
'jirafa', 'león', 'tigre', 'pez',
'pájaro', 'mariposa', 'araña',
'abeja', 'libro'
),
response = c(
'florecita, flor',
'arbola, árbol',
'ratono, ratón',
'elefantito, elefante',
'jirafita, jirafa',
'leoncito, león',
'tie',
'pezi',
'pajo',
'maria, mariposa',
'aral, araña',
'abejo, abeja',
'lic, libro'
),
access_to_target = c(
1, 1, 1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1
),
task_name = rep('example2', 13), # Nueva tarea
assessment_date = rep('04-11-2024', 13) # Nueva fecha
)
# Combinar ambos data frames
combined_data <- rbind(data1, data2)
# Mostrar el DataFrame combinado
print(combined_data)
# Crear un data frame con los datos de la primera tarea
data1 <- data.frame(
item_id = 1:13,  # IDs del 1 al 13
item = c(
'peine', 'mesa', 'casa', 'perro', 'gato',
'silla', 'ventana', 'puerta', 'luz', 'luna',
'sol', 'estrella', 'cielo'
),
response = c(
'pente, peina',
'misa, miso',
'casa',
'pelo, gato',
'gatoz',
'sile, silla',
'venta, ventana',
'puerpo, puerta',
'luces, luz',
'lunita, luna',
'solito, sol',
'esc, esme, este, estrella',
'cielito, cielo'
),
access_to_target = c(
1, 0, 1, 0, 0,
1, 1, 1, 1, 1,
1, 1, 1
),
task_name = rep('example1', 13),  # Repetir "EPLA" para todos los ítems
assessment_date = rep('03-11-2024', 13) # Repetir la fecha
)
# Crear un data frame con los datos de la segunda tarea
data2 <- data.frame(
item_id = 14:26, # IDs del 14 al 26
item = c(
'flor', 'árbol', 'ratón', 'elefante',
'jirafa', 'león', 'tigre', 'pez',
'pájaro', 'mariposa', 'araña',
'abeja', 'libro'
),
response = c(
'florecita, flor',
'arbola, árbol',
'ratono, ratón',
'elefantito, elefante',
'jirafita, jirafa',
'leoncito, león',
'tie',
'pezi',
'pajo',
'maria, mariposa',
'aral, araña',
'abejo, abeja',
'lic, libro'
),
access_to_target = c(
1, 1, 1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1
),
task_name = rep('example2', 13), # Nueva tarea
assessment_date = rep('04-11-2024', 13) # Nueva fecha
)
# Combinar ambos data frames
combined_data <- rbind(data1, data2)
# Crear directorio "data" si no existe
if (!dir.exists("data")) {
dir.create("data")
}
# Guardar el dataframe combinado como un archivo .RData en la carpeta "data"
save(combined_data, file = "data/combined_data.RData")
# Mostrar el DataFrame combinado
print(combined_data)
# Crear un data frame con los datos de la segunda tarea
data2 <- data.frame(
item_id = 14:26, # IDs del 14 al 26
item = c(
'flor', 'árbol', 'ratón', 'elefante',
'jirafa', 'león', 'tigre', 'pez',
'pájaro', 'mariposa', 'araña',
'abeja', 'libro'
),
response = c(
'florecita, flor',
'arbola, árbol',
'ratono, ratón',
'elefantito, elefante',
'jirafita, jirafa',
'leoncito, león',
'tie',
'pezi',
'pajo',
'maria, mariposa',
'aral, araña',
'abejo, abeja',
'lic, libro'
),
access_to_target = c(
1, 1, 1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1
),
task_name = rep('example2', 13), # Nueva tarea
assessment_date = rep('04-11-2024', 13) # Nueva fecha
)
# Combinar ambos data frames
combined_data <- rbind(data1, data2)
# Crear directorio "data" si no existe
if (!dir.exists("data")) {
dir.create("data")
}
# Guardar el dataframe combinado como un archivo .RData en la carpeta "data"
save(combined_data, file = "data/sample_df.RData")
# Mostrar el DataFrame combinado
print(combined_data)
document()
install()
