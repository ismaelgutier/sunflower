IGC_step4_regular <- IGC_step3_regular %>% classify_errors(access_col = "accessed",
response_col = "Response",
item_col = "item") %>%
dplyr::mutate(general_ID = dplyr::row_number())
IGC_step4_regular_skinny = IGC_step4_regular %>%
dplyr::select(general_ID, ID, item_ID, item, Response, lexicality,
cosine_similarity, nonword:no_response, comment)
rmarkdown::paged_table(IGC_step4_regular_skinny, options = list(rows.print = 15, align = "c"))
IGC_step2.1_skinnydf = IGC_step2.1 %>% #dplyr::select(-c(task_ID, correct, task_type)) %>%
dplyr::rename(attempt = Attempt, response = Response, position = Position)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(sunflower) # to work
require(tidyverse) # to work along sunflower
require(knitr) # to work in Rmarkdown
require(kableExtra) # to work in Rmarkdown
require(rmarkdown) # to work in Rmarkdown
require(ggplot2) #to plot
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response)
rmarkdown::paged_table(IGC %>% dplyr::select(c(item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 5.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 5.5, height = 3.75, dpi = 600)
IGC_step1 = IGC %>% separate_responses(col_name = "response",
separate_with = ", ") %>%
get_attempts(first_production = Attempt_1, drop_blank_spaces = T)
IGC_step1_skinnydf = IGC_step1 %>% dplyr::select(-c(task_type))
rmarkdown::paged_table(IGC_step1_skinnydf, options = list(rows.print = 25, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot2 <- gridExtra::tableGrob(IGC_step1_skinnydf %>% dplyr::select(c(ID, item, attempt = Attempt, response = Response)) %>%
dplyr::slice_head(n = 15))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot2 <- ggplot2::ggplot() +
ggplot2::theme_void() +  # Eliminar todos los elementos gráficos
ggplot2::annotation_custom(table_plot2)
# Mostrar el gráfico
plot2
ggsave("artwork/figure2.png", plot2, width = 4.25, height = 4.75, dpi = 600)
ggsave("artwork/figure2.svg", plot2, width = 4.25, height = 4.75, dpi = 600)
IGC_step2 = IGC_step1 %>% get_formal_similarity(item_col = "item",
response_col = "Response",
attempt_col = "Attempt",
group_cols = c("ID", "task_ID"))
# Define terms to remove
terms_to_remove <- c("el", "la", "un", "una", "vaya",
"los", "las", "unos", "unas", "no")
# Create a pattern to match the terms
pattern <- paste0("\\b(", paste(terms_to_remove, collapse = "|"), ")\\b")
# Filter the DataFrame to exclude rows containing the terms in 'Response'
IGC_step2_skinnydf <- IGC_step2 %>%
dplyr::filter(!str_detect(Response, pattern))
IGC_step2_skinnydf = IGC_step2 %>% dplyr::select(-c(task_type))
rmarkdown::paged_table(IGC_step2_skinnydf, options = list(rows.print = 25, align = "c"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
dplyr::select(-comment_warning)%>%
#dplyr::select(c(item_ID, item, Response, RA, Attempt, shared1char:DLd, JWd, pcc, CdA_diff = approach_diff)) %>%
dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure4.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure4.svg", plot3, width = 21, height = 5, dpi = 600)
IGC_step2.1_skinnydf = IGC_step2.1 %>% #dplyr::select(-c(task_ID, correct, task_type)) %>% dplyr::rename(attempt = Attempt, response = Response, position = Position)
rmarkdown::paged_table(IGC_step2.1_skinnydf, options = list(rows.print = 25, align = "c"))
IGC_step2.1_skinnydf = IGC_step2.1 #%>% #dplyr::select(-c(task_ID, correct, task_type)) %>% dplyr::rename(attempt = Attempt, response = Response, position = Position)
colnames(IGC_step2)
IGC_step2.1 = IGC_step2 %>% positional_accuracy(item_col = "item",
response_col = "Response",
match_col = "adj_strict_match_pos")
IGC_step2.1_skinnydf = IGC_step2.1 #%>% #dplyr::select(-c(task_ID, correct, task_type)) %>% dplyr::rename(attempt = Attempt, response = Response, position = Position)
rmarkdown::paged_table(IGC_step2.1_skinnydf, options = list(rows.print = 25, align = "c"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(sunflower) # to work
require(tidyverse) # to work along sunflower
require(knitr) # to work in Rmarkdown
require(kableExtra) # to work in Rmarkdown
require(rmarkdown) # to work in Rmarkdown
require(ggplot2) #to plot
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response)
rmarkdown::paged_table(IGC %>% dplyr::select(c(item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
gc()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(sunflower) # to work
require(tidyverse) # to work along sunflower
require(knitr) # to work in Rmarkdown
require(kableExtra) # to work in Rmarkdown
require(rmarkdown) # to work in Rmarkdown
require(ggplot2) #to plot
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response)
rmarkdown::paged_table(IGC %>% dplyr::select(c(item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 5.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 5.5, height = 3.75, dpi = 600)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 5.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 5.5, height = 3.75, dpi = 600)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item, response)) %>%
dplyr::slice_head(n = 11))
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 5.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 5.5, height = 3.75, dpi = 600)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item_ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
View(IGC)
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response) %>%
dplyr::mutate(ID = ID+100)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item_ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 5.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 5.5, height = 3.75, dpi = 600)
# Mostrar el gráfico
plot
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response) %>%
dplyr::mutate(ID = ID+1000)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item_ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response) %>%
dplyr::mutate(ID = ID+1000)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item_ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 5.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 5.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.png", plot, width = 8.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.png", plot, width = 8.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 8.5, height = 3.75, dpi = 600)
ggsave("artwork/figure1.png", plot, width = 7, height = 3.75, dpi = 600)
ggsave("artwork/figure1.png", plot, width = 7, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 7, height = 3.75, dpi = 600)
ggsave("artwork/figure1.png", plot, width = 7.25, height = 3.75, dpi = 600)
ggsave("artwork/figure1.png", plot, width = 7.25, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 7.25, height = 3.75, dpi = 600)
IGC_step1 = IGC %>% separate_responses(col_name = "response",
separate_with = ", ") %>%
get_attempts(first_production = Attempt_1, drop_blank_spaces = T)
IGC_step1_skinnydf = IGC_step1 %>% dplyr::select(-c(task_type))
rmarkdown::paged_table(IGC_step1_skinnydf, options = list(rows.print = 25, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot2 <- gridExtra::tableGrob(IGC_step1_skinnydf %>% dplyr::select(c(task_ID, ID, item_ID, item, attempt = Attempt, response = Response)) %>%
dplyr::slice_head(n = 15))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot2 <- ggplot2::ggplot() +
ggplot2::theme_void() +  # Eliminar todos los elementos gráficos
ggplot2::annotation_custom(table_plot2)
# Mostrar el gráfico
plot2
ggsave("artwork/figure2.png", plot2, width = 4.25, height = 4.75, dpi = 600)
ggsave("artwork/figure2.svg", plot2, width = 4.25, height = 4.75, dpi = 600)
ggsave("artwork/figure2.png", plot2, width = 7.25, height = 4.75, dpi = 600)
ggsave("artwork/figure2.png", plot2, width = 7.25, height = 4.75, dpi = 600)
ggsave("artwork/figure2.svg", plot2, width = 7.25, height = 4.75, dpi = 600)
IGC_step2 = IGC_step1 %>% get_formal_similarity(item_col = "item",
response_col = "Response",
attempt_col = "Attempt",
group_cols = c("ID", "task_ID"))
# Define terms to remove
terms_to_remove <- c("el", "la", "un", "una", "vaya",
"los", "las", "unos", "unas", "no")
# Create a pattern to match the terms
pattern <- paste0("\\b(", paste(terms_to_remove, collapse = "|"), ")\\b")
# Filter the DataFrame to exclude rows containing the terms in 'Response'
IGC_step2_skinnydf <- IGC_step2 %>%
dplyr::filter(!str_detect(Response, pattern))
IGC_step2_skinnydf = IGC_step2 %>% dplyr::select(-c(task_type))
rmarkdown::paged_table(IGC_step2_skinnydf, options = list(rows.print = 25, align = "c"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
dplyr::select(-comment_warning)%>%
#dplyr::select(c(item_ID, item, Response, RA, Attempt, shared1char:DLd, JWd, pcc, CdA_diff = approach_diff)) %>%
dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure4.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure4.svg", plot3, width = 21, height = 5, dpi = 600)
IGC_step2 = IGC_step1 %>% get_formal_similarity(item_col = "item",
response_col = "Response",
attempt_col = "Attempt",
group_cols = c("ID", "task_ID"))
# Define terms to remove
terms_to_remove <- c("el", "la", "un", "una", "vaya",
"los", "las", "unos", "unas", "no")
# Create a pattern to match the terms
pattern <- paste0("\\b(", paste(terms_to_remove, collapse = "|"), ")\\b")
# Filter the DataFrame to exclude rows containing the terms in 'Response'
IGC_step2_skinnydf <- IGC_step2 %>%
dplyr::filter(!str_detect(Response, pattern))
IGC_step2_skinnydf = IGC_step2 %>% dplyr::select(-c(task_type))
rmarkdown::paged_table(IGC_step2_skinnydf, options = list(rows.print = 25, align = "c"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
dplyr::select(-comment_warning)%>%
#dplyr::select(c(item_ID, item, Response, RA, Attempt, shared1char:DLd, JWd, pcc, CdA_diff = approach_diff)) %>%
dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure4.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure4.svg", plot3, width = 21, height = 5, dpi = 600)
IGC_step2_skinnydf
IGC_step2_skinnydf = IGC_step2 %>% dplyr::select(-c(task_type, test))
IGC_step2_skinnydf
table_plot3
IGC_step2_skinnydf
IGC_step2_skinnydf
colnames(IGC_step2_skinnydf)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
dplyr::select(-comment_warning)%>%
dplyr::select(c(task_ID, item_ID, item, Response, RA, Attempt, shared1char:DLd, JWd, pcc)) %>%
dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.svg", plot3, width = 21, height = 5, dpi = 600)
colnames(IGC_step2_skinnydf)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
#dplyr::select(-comment_warning)%>%
dplyr::select(c(task_ID, item_ID, item, Response, RA, Attempt, similarity_str:approach_diff, pcc, comment_warning)) %>%
dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot4 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
#dplyr::select(-comment_warning)%>%
dplyr::select(c(task_ID, item_ID, item, Response, RA, Attempt,
similarity_str:approach_diff, pcc, comment_warning)) %>%
dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
rmarkdown::paged_table(IGC_step2_skinnydf, options = list(rows.print = 25, align = "c"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
dplyr::select(-comment_warning)%>%
dplyr::select(c(task_ID, item_ID, item, Response, RA, Attempt, shared1char:DLd, JWd, pcc)) %>%
#dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.svg", plot3, width = 21, height = 5, dpi = 600)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot4 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
#dplyr::select(-comment_warning)%>%
dplyr::select(c(task_ID, item_ID, item, Response, RA, Attempt,
similarity_str:approach_diff, pcc, comment_warning)) %>%
#dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot4 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot4)
ggsave("artwork/figure3.1.svg", plot4, width = 21, height = 5, dpi = 600)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% #dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
#dplyr::select(-comment_warning)%>%
#dplyr::select(c(task_ID, item_ID, item, Response, RA, Attempt, shared1char:DLd, JWd, pcc)) %>%
#dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.svg", plot3, width = 21, height = 5, dpi = 600)
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot3 <- gridExtra::tableGrob(
IGC_step2_skinnydf %>% #dplyr::select(-c(responseL, targetL)) %>%
dplyr::mutate(across(where(is.numeric), ~ round(., 3))) %>%
dplyr::select(-comment_warning)%>%
#dplyr::select(c(task_ID, item_ID, item, Response, RA, Attempt, shared1char:DLd, JWd, pcc)) %>%
#dplyr::rename(diff_chars = diff_char_num, attempt = Attempt, response = Response) %>%
dplyr::slice_head(n = 15) # Seleccionar las primeras 7 filas
)
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot3 <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot3)
# Mostrar el gráfico
plot3
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.png", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.svg", plot3, width = 21, height = 5, dpi = 600)
ggsave("artwork/figure3.png", plot3, width = 22, height = 5, dpi = 600)
ggsave("artwork/figure3.svg", plot3, width = 22, height = 5, dpi = 600)
IGC <- readxl::read_xlsx("data/1-Gutiérrez-Cordero_data_RAW.xlsx") %>%
dplyr::select(test, task_ID, task_type, ID, item_ID = task_item_ID, item, final_response, correct) %>%
dplyr::filter(test %in% c("SnodgrassVanderwart", "BETA", "EPLA", "Gutiérrez-Cordero")) %>%
dplyr::filter(!str_detect(task_type, "nonword")) %>%
dplyr::arrange(ID) %>%
dplyr::rename(response = final_response) %>%
dplyr::mutate(ID = ID+1000)
rmarkdown::paged_table(IGC %>% dplyr::select(c(task_ID, item_ID, item, response)), options = list(rows.print = 8, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot <- gridExtra::tableGrob(IGC %>% dplyr::select(c(task_ID, ID, item_ID, item, response)) %>%
dplyr::slice_head(n = 11))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot <- ggplot() +
theme_void() +  # Eliminar todos los elementos gráficos
annotation_custom(table_plot)
# Mostrar el gráfico
plot
ggsave("artwork/figure1.png", plot, width = 7.25, height = 3.75, dpi = 600)
ggsave("artwork/figure1.svg", plot, width = 7.25, height = 3.75, dpi = 600)
IGC_step1 = IGC %>% separate_responses(col_name = "response",
separate_with = ", ") %>%
get_attempts(first_production = Attempt_1, drop_blank_spaces = T)
IGC_step1_skinnydf = IGC_step1 %>% dplyr::select(-c(task_type))
rmarkdown::paged_table(IGC_step1_skinnydf, options = list(rows.print = 25, align = "ccc"))
# Convertir el dataframe en un objeto tipo tabla usando tableGrob
table_plot2 <- gridExtra::tableGrob(IGC_step1_skinnydf %>% dplyr::select(c(task_ID, ID, item_ID, item, attempt = Attempt, response = Response)) %>%
dplyr::slice_head(n = 15))
# Crear un gráfico vacío para agregar la tabla, eliminando los márgenes
plot2 <- ggplot2::ggplot() +
ggplot2::theme_void() +  # Eliminar todos los elementos gráficos
ggplot2::annotation_custom(table_plot2)
# Mostrar el gráfico
plot2
ggsave("artwork/figure2.png", plot2, width = 7.25, height = 4.75, dpi = 600)
ggsave("artwork/figure2.svg", plot2, width = 7.25, height = 4.75, dpi = 600)
document()
instal()
install()
document()
install()
