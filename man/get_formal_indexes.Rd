% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_formal_indexes.R
\name{get_formal_indexes}
\alias{get_formal_indexes}
\title{Compute formal indexes for to allow their analysis}
\usage{
get_formal_indexes(
  df,
  item_col = "item",
  response_col = "Response",
  attempt_col = "Attempt",
  group_cols = c("ID", "item_ID")
)
}
\arguments{
\item{df}{A dataframe containing the data to analyze.}

\item{item_col}{The name of the column containing the target items. Default is `"item"`.}

\item{response_col}{The name of the column containing the response items. Default is `"Response"`.}

\item{attempt_col}{The name of the column indicating the attempt number or sequence. Default is `"Attempt"`.}

\item{group_cols}{A character vector specifying the column names to group by before calculating indexes. Default is `c("ID", "item_ID")`.}
}
\value{
A dataframe with additional columns for the calculated indexes.
}
\description{
This function computes various formal indexes to analyze phoneme data. It calculates character counts, shared proportions, differences in character counts, Levenshtein distance, Damerau-Levenshtein distance, Jaro-Winkler similarity, and other indexes for comparing target and response columns in a dataframe.
}
\details{
The function performs the following operations:
\itemize{
  \item Calculates the length of target and response strings.
  \item Computes proportions of shared characters and positions.
  \item Calculates differences in character counts, Levenshtein distance, Damerau-Levenshtein distance, and Jaro-Winkler similarity.
  \item Computes the proportion of correct characters (pcc) and approach difference.
  \item Determines if the target and response have the same length and are identical.
  \item Calculates the longest common subsequence (LCS) and similarity vector.
  \item Computes strict matching positions between target and response strings.
  \item Adjusts strict matching positions to the length of the target.
}

The function uses the `PTXQC::LCS` function for LCS calculation and handles NA values appropriately. It also prints the execution time of the function.
}
\examples{
#require(tictoc); require(dplyr); require(rlang)

data("IGC_long")

result <- get_formal_indexes(df = IGC_long,
                                item_col = "item",
                                response_col = "Response",
                                attempt_col = "Attempt",
                                group_cols = c("ID", "item_ID"))

head(result)

}
